


Redis的数据结构的实现,保证数据不丢失的.

mysql的索引,mysql的优化,mysql的事物隔离级别,innodb的默认事物级别, 两种引擎的区别

翻转链表

线程池的阻塞队列到底怎么用的.

mysql的事务,redis的事务,spring 的事务,原子类,安全的自增操作怎么搞


数据库设计的范式. 微博关注怎么设计存储.



主要栏目,redis,mysql.




 class Node {
    int value;
    Node left;
    Node right;
}

public class Main {

    public static void main (String [] args){
        //some test
    }

    private List<Integer> fun(Node root){
        List<Integer> result = new ArrayList()<>;
        Stack<Node> stack = new Stack()<>;

        if (root == null){
            return new ArrayList()<>;
        }
        stack.push(root);
        while (!stack.isEmpty()){
            Node tmp = stack.pop();
            if (tmp != null){
                result.add(tmp.value);
                stack.push(tmp.right);
                stack.push(tmp.left);
            }
        }
        return result;
    }
}

String s = "This is a beautiful day.", Integer n = 5
String[] result = {"This", "is a", "beautiful", "day."}




public String [] fun1(String s, Integer n) {
    char [] cArr = s.toCharArray();
    List<String> result = new ArrayList()<>;
    int i = 0;
    while (i < s.length()){
        StringBuilder sb = new StringBuilder();
        int j = 0;
        while (true){
            sb.append(cArr[i]);
            if ( j >= 4 && cArr[i] == ' '){
                String res = sb.toString();
                result.add(removeSpace(res));

                break;
            }
            j++;
            i++;
        }
    }
    String [] resultArr = new String [result.size()];
    for(int i =0;i < result.size(); i++){
        resultArr[i] = result.get(i);
    }
    return resultArr;
}

private String removeSpace(String s){
    if(s.charAt(0) == ' '){
        s = s.subString(1, s.length() - 1);
    }
    if(s.charAt(s.length() - 1) == ''){
        s = s.subString(0, s.length() - 2);
    }
    return s;
}

<1000000, 12345 - > yiwanliangqiansanbaisishiwu,


String fun2(Integer n){
    String [] ss = {"wan",....};

    Map<Integer, String> map = new HashMap<>();

    map.put(1,"yi");
    ...
    ...


    List<Integer> bit = new ArrayList<>();
    while( n != 0){
        bit.add(n % 10);
        n = n / 10;
    }





}
