<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>呼延十</title>
    <description>千里我独行，不必相送。</description>
    <link>http://0.0.0.0:8101/</link>
    <atom:link href="http://0.0.0.0:8101/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 11 Oct 2018 12:58:08 +0000</pubDate>
    <lastBuildDate>Thu, 11 Oct 2018 12:58:08 +0000</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Arraylist和linkedlist的区别</title>
        <description>&lt;p&gt;PS：推荐大家先去了解一下链表这个数据结构。&lt;/p&gt;

&lt;p&gt;ArrayList和LinkedList可以说是日常业务开发中最常使用的容器类了，同时，他们的区别也是面试高发区，虽然很简单，但是我们总是不能说的完整，今天就通过对他们源码的阅读来进一步加深理解。&lt;/p&gt;

&lt;p&gt;首先，看他们类的定义可以发现：
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011174000106.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011174024404.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他们都是实现了List&lt;E&gt;接口，这个接口干了什么呢？&lt;/E&gt;&lt;/p&gt;

&lt;p&gt;这个接口定义了对列表的一些基本操作，如&lt;code class=&quot;highlighter-rouge&quot;&gt;add,contains,indexof,remove&lt;/code&gt;等基本方法，由他的实现类各自进行实现。&lt;/p&gt;

&lt;p&gt;因此，当你只是需要一个列表进行常规的添加移除查找操作，那么ArrayList和LinkedList在使用体验(不考虑性能)上基本没有区别，你甚至不用关心他的内部实现，而是调用一些List&lt;E&gt;接口的方法就ok。&lt;/E&gt;&lt;/p&gt;

&lt;p&gt;那么他们的具体实现有哪些区别呢？&lt;/p&gt;

&lt;p&gt;下面对他们常用的方法进行源码的阅读。&lt;/p&gt;
&lt;h3 id=&quot;arraylist&quot;&gt;ArrayList&lt;/h3&gt;

&lt;h4 id=&quot;成员变量&quot;&gt;成员变量&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011174948431.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ArrayList有两个成员变量，图中可以看到，一个Object的数组，一个int类型的size，用来定义数组的大小。&lt;/p&gt;

&lt;h4 id=&quot;get方法&quot;&gt;get()方法&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011175724911.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先检查传入的index，然后返回数组在该index的值。&lt;/p&gt;

&lt;h4 id=&quot;add方法&quot;&gt;add()方法&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011180017237.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先确保容量够用，然后将新加入的对象放在数组尾部。&lt;/p&gt;

&lt;h4 id=&quot;remove方法&quot;&gt;remove()方法&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011180632931.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先确保容量够用，然后计算出需要移动的数量，例如size=10，要删除index=5的元素，则需要移动后面的四个元素，然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;System.arraycopy()&lt;/code&gt;方法，将数组的后面4个依次向前移动一位，然后将数组最后一位置为null。&lt;/p&gt;

&lt;h3 id=&quot;linkedlist&quot;&gt;LinkedList&lt;/h3&gt;

&lt;h4 id=&quot;成员变量-1&quot;&gt;成员变量&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011181337422.png&quot; alt=&quot;&quot; /&gt;
LinkedList本身的属性比较少，主要有三个，一个是size，表明当前有多少个节点；一个是first代表第一个节点；一个是last代表最后一个节点。&lt;/p&gt;

&lt;h4 id=&quot;get方法-1&quot;&gt;get()方法&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011181529768.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先检查传入的index是否合法，然后调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;node(index)&lt;/code&gt;方法，那么来看看&lt;code class=&quot;highlighter-rouge&quot;&gt;node()&lt;/code&gt;方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011181656533.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;判断index值是否大于总数的一半。&lt;/p&gt;

&lt;p&gt;如果小于，则从first节点向后遍历，直到找到index节点，然后返回该节点的值。&lt;/p&gt;

&lt;p&gt;如果大于，则从last节点向前遍历，直到找到index节点，然后返回该节点的值。&lt;/p&gt;

&lt;h4 id=&quot;add方法-1&quot;&gt;add()方法&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011182034991.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011182020860.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;add方法，直接调用了linklast方法，将传入的值作为最后一个节点链接在链表上。&lt;/p&gt;

&lt;h4 id=&quot;remove方法-1&quot;&gt;remove()方法&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011182342319.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011182356842.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;remove方法的思路是什么呢？从头开始遍历链表，当找到要删除的节点，将他删除。删除的方法呢？将该节点的前后节点链接起来，类似于下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/链表删除.jpg&quot; alt=&quot;链表删除.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;对比&quot;&gt;对比&lt;/h3&gt;

&lt;p&gt;由上面的常用方法可以发现&lt;/p&gt;

&lt;p&gt;1.ArrayList使用数组存储元素，因此在查询时速度较快，直接返回该位置的元素即可，时间复杂度为O(1);而LinkedList使用双向链表存储元素，在查询时需要从头或者尾遍历至查询元素，时间复杂度为O(n/2);&lt;/p&gt;

&lt;p&gt;2.还是因为存储方式的问题，ArrayList在插入或者删除时，需要移动插入位置之后的所有元素，因此速度较慢，时间复杂度为O(n)。而LinkedList只需要找到该位置，移动”指针”即可,时间复杂度为O(1)。&lt;/p&gt;

&lt;h3 id=&quot;结论&quot;&gt;结论&lt;/h3&gt;

&lt;p&gt;其实在日常的开发中，ArrayList更受欢迎，而且可以完成很多的任务，但是仍有一些特殊的情景适合使用LinkedList。他们的使用场景如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;当你对列表更多的进行查询，即获取某个位置的元素时，应当优先使用ArrayList；当你对列表需要进行频繁的删除和增加，而很少使用查询时，优先使用LinkedList；&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;注意事项&quot;&gt;注意事项！&lt;/h3&gt;

&lt;p&gt;1.上述结论适用于普遍的情景，有些极端情况不一定符合。比如频繁的在数组结尾附近插入数据，ArrayList也快于LinkedList。&lt;/p&gt;

&lt;p&gt;2.LinkedList使用的空间大于ArrayList，因为本质上，ArrayList在每个位置存储了元素，而LinkedList存储了元素+前面节点+后面节点。&lt;/p&gt;

&lt;h3 id=&quot;扩展&quot;&gt;扩展&lt;/h3&gt;

&lt;p&gt;我们知道ArrayList和LinkedList都是有size的，那么当添加的元素过多，他们怎么扩容呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ArrayList：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ArrayList使用数组存储元素，因此扩容时为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011200252465.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，每次扩容后的大小为之前的1.5倍。&lt;code class=&quot;highlighter-rouge&quot;&gt;       int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1);
&lt;/code&gt;,而且之后有一个复制全部元素的操作，这个操作很费时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkedList：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于LinkedList是一个双向链表，因此不需要扩容机制，直接在前后添加元素即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;因此：在使用ArrayList时，如果你能预估大小，最好直接定义初始容量，这样能节省频繁的扩容带来的额外开支。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;初始化定义容量的构造方法为：
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011200659199.png&quot; alt=&quot;&quot; /&gt;。&lt;/p&gt;

&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;

&lt;p&gt;其实想写这个很久了，一直拖延着，今天终于回忆起了面试的时候被ArrayList和LinkedList支配的恐惧。(都喜欢问，一直问(校招))。因此趁热打铁，阅读了他们的源码并记录下来。相信常常回顾之下不会再受困于此，也能让日常工作的编码水平有些许提升。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-10-11 完成
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/2018/10/11/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/2018/10/11/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        
        
        <category>源码阅读</category>
        
      </item>
    
      <item>
        <title>使用flyway进行数据库版本控制</title>
        <description>&lt;h2 id=&quot;什么是flyway&quot;&gt;什么是flyway&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Flyway is an open-source database migration tool. It strongly favors simplicity and convention over configuration.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Flyway是一个简单开源数据库版本控制器（约定大于配置），主要提供migrate、clean、info、validate、baseline、repair等命令。它支持SQL（PL/SQL、T-SQL）方式和Java方式，支持命令行客户端等，还提供一系列的插件支持（Maven、Gradle、SBT、ANT等）。&lt;/p&gt;

&lt;p&gt;官方网站：&lt;a href=&quot;https://flywaydb.org/&quot;&gt;https://flywaydb.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关于flyway的更多介绍信息请移步google一下。&lt;/p&gt;

&lt;h2 id=&quot;为什么要使用flyway&quot;&gt;为什么要使用flyway&lt;/h2&gt;

&lt;p&gt;在日常的开发中，我们使用git管理代码的版本，那么数据库的版本呢？使用flyway。&lt;/p&gt;

&lt;p&gt;个人认为，可以大概的将flyway理解为数据库的git，方便多人协作及记录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git&lt;/strong&gt;：让你和同事更加轻松的维护同一个项目，你可以很方便的获取到他最新提交的改动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flyway&lt;/strong&gt;：让你及时的知道同事对数据库的改动并且能够自动在你的本地执行这些改动。&lt;/p&gt;

&lt;h2 id=&quot;我遇到的问题&quot;&gt;我遇到的问题&lt;/h2&gt;

&lt;p&gt;我所经历的项目大部分是已经配置好flyway的，也习惯了这一便利。&lt;/p&gt;

&lt;p&gt;最近新上手一个项目，和另一个同事一起维护，此项目没有配置flyway，因此经历了以下两种情况：&lt;/p&gt;

&lt;p&gt;1.同事对数据库做了改动并且代码合并到线上(我并不参与review)，之后我拉取线上代码，连接本地数据库启动项目，报错，原因是本地没有新添加的数据表，而项目启动依赖于他。&lt;/p&gt;

&lt;p&gt;2.我在完成一个需求之后，打算将代码上线，需要在代码合入之前手动去线上(去服务器上或者通过phpmyadmin等工具)执行sql创建数据表。&lt;/p&gt;

&lt;p&gt;这是什么反人类操作？？？不怕我将create写错成drop吗？&lt;/p&gt;

&lt;p&gt;因此我忍无可忍，昨晚下班后加班了半个小时，给该项目添加了flyway的依赖。&lt;/p&gt;

&lt;h2 id=&quot;springboot-集成-flyway&quot;&gt;springboot 集成 flyway&lt;/h2&gt;

&lt;p&gt;1.项目添加依赖&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.flywaydb&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;flyway-core&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;5.0.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Bazel&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//在deps中添加
&quot;//third_party/java:org_flywaydb_flyway_core&quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.在&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;文件中加入以下内容：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#打开&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;文件存放位置&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;classpath:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migration&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#版本记录表格&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemas_version&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flyway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中重要的三项配置已经添加注释，其他的配置可以百度自行修改。&lt;/p&gt;

&lt;p&gt;3.上文配置的路径&lt;code class=&quot;highlighter-rouge&quot;&gt;classpath:db/migration&lt;/code&gt;下添加sql文件，
命名格式为：
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20181011000114503.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中V之后的数字代表了当前版本，一般采用递增的形式，不可以重复。&lt;/p&gt;

&lt;p&gt;但是可以选择多种形式，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;V1,V2&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;V1.1,V1.2&lt;/code&gt;等等。&lt;/p&gt;

&lt;p&gt;4.在数据库中新建该数据库，注意是全新的库，启动项目，项目在启动时flyway会自动执行所有的sql文件，并新建一张数据表&lt;code class=&quot;highlighter-rouge&quot;&gt;schemas_version&lt;/code&gt;来保存版本数据。&lt;/p&gt;

&lt;h2 id=&quot;flyway好用吗&quot;&gt;flyway好用吗？&lt;/h2&gt;
&lt;p&gt;我觉得很好用，他成功解决了我的以下痛点。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;和同事同时维护一个项目，同时对数据库做出了一些修改，我在使用git拉取了最新的代码之后，运行总是报错，需要自己去重新执行一遍该表的创建语句来在本地进行创建，使用flyway后，拉取最新代码的同时会拉取最新的sql文件，同时在服务启动时自动创建数据表，对一些和自己无关的数据表完全不用关心了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新接手一个项目，在本地进行开发调试，本地新建数据库后，需要执行一遍建表语句，使用flyway可以自动的创建该项目的所有表格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;换电脑，我日常开发使用一台台式机及一台笔记本，紧急情况使用家中笔记本进行一些开发，在每次新换电脑时都需要重新创建一遍数据库的表，十分的麻烦。使用flyway的遍历同第二点(可以理解为换电脑等于在新电脑上运行新项目)。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;注意事项&quot;&gt;注意事项&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;上面的教程并没有很详细的介绍flyway的具体各项配置，日常使用copy上面的配置改动有注释的三项即可，有其他需要可以自行百度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;上述教程是在新项目中使用flyway，那么可不可以为已有的项目添加flyway依赖呢？当然可以。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;为已有项目添加依赖方法此方法为个人使用应该有其他更方便可靠的办法欢迎讨论&quot;&gt;为已有项目添加依赖方法（此方法为个人使用，应该有其他更方便可靠的办法，欢迎讨论）：&lt;/h4&gt;

&lt;p&gt;flyway是依靠什么判断版本呢？使用过一次之后你就知道，是根据数据库中&lt;code class=&quot;highlighter-rouge&quot;&gt;schemas_version&lt;/code&gt;表的记录。&lt;/p&gt;

&lt;p&gt;你每次执行过一次sql文件，在该表中就会添加一条类似于&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;V13 success
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;的数据。&lt;/p&gt;

&lt;p&gt;当项目启动时，flyway扫描sql文件，发现当前有&lt;code class=&quot;highlighter-rouge&quot;&gt;V14&lt;/code&gt;开头的文件，同时数据库中没有V14执行的记录，那么就会执行该文件。&lt;/p&gt;

&lt;p&gt;你可以将当前数据库的所有表格创建语句导出到sql文件，然后新建&lt;code class=&quot;highlighter-rouge&quot;&gt;V1__init_database.sql&lt;/code&gt;文件，将所有创建语句copy到该文件中，然后创建新库，连接新库启动项目，之后copy新库中&lt;code class=&quot;highlighter-rouge&quot;&gt;schemas_version&lt;/code&gt;数据表的结构及数据，添加到已有的数据库中，这样项目启动时便不会对已有的数据库产生影响。&lt;/p&gt;

&lt;p&gt;这波操作的本质是：模仿一条记录，让flyway认为当前的数据库是一个已经执行过的版本，不做任何的改动，后续的改动继续添加即可。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有时会写入错误的sql语句，修改后再次执行便会报错显示数据库中已有该版本的记录，此时进入数据库删除&lt;code class=&quot;highlighter-rouge&quot;&gt;schemas_version&lt;/code&gt;中对应记录重新执行即可。(反正在开发环境无所谓的，我们又不会去生产环境执行错误的sql)。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总结：flyway是个好东西，强烈建议spring boot项目都进行配置，可以节省许多时间及避免很多因联合开发带来的麻烦问题。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-10-10 完成
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/spring%20boot/2018/10/09/%E4%BD%BF%E7%94%A8flyway%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/spring%20boot/2018/10/09/%E4%BD%BF%E7%94%A8flyway%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</guid>
        
        
        <category>开发环境搭建</category>
        
        <category>Spring Boot</category>
        
      </item>
    
      <item>
        <title>代码优化的方法</title>
        <description>&lt;p&gt;上一篇博客说到最近做了一个大一些的需求，等需求完成后代码非常的凌乱，自己重构(整理了一波)，在整理过程中，有一点对于如何优化代码的想法，特此记录一下。&lt;/p&gt;

&lt;p&gt;这里说的优化，是指完成了杂乱的代码后，重现让它更合理，更干净一些，并不是在编程开始前的设计优化，因此不着重于设计模式等的使用。&lt;/p&gt;

&lt;p&gt;在代码的review过程中，推荐使用一些gitlab，gerrit等工具来查看自己的代码，因为git工具会将你的代码改动更加直观的展示出来，而在编译器中，我们看到的更多是整体的代码，容易分散注意力。&lt;/p&gt;

&lt;p&gt;代码的乱，乱在哪里，一是程序本身的属性不够好，如扩展性，健壮性等。二是可读性不够好，不能很直观的读懂代码。下面是针对这两个方面的几个小方法。&lt;/p&gt;

&lt;h3 id=&quot;程序本身的提高&quot;&gt;程序本身的提高&lt;/h3&gt;

&lt;h4 id=&quot;思考需求本身优化设计&quot;&gt;思考需求本身，优化设计&lt;/h4&gt;

&lt;p&gt;这一步其实很重要，因为好的设计可从根本上提高代码的质量，但是因为过于有“个性”，每个项目都有自己适合的设计，无法具体分析。&lt;/p&gt;

&lt;p&gt;但是在编码完成后，可以暂时忘掉细节代码，想一下整体的项目需求，套用一下基本的设计模式，比如最简单的工厂模式，观察者模式等等，如果真的有很合适的，千万不要畏惧额外的工作量，改他！&lt;/p&gt;

&lt;h4 id=&quot;提取共性&quot;&gt;提取共性&lt;/h4&gt;

&lt;p&gt;这一步其实非常的简单，把代码中使用到的实体类，各种类的属性看一下，有没有一些重合度很高的？比如有一个&lt;strong&gt;手机类&lt;/strong&gt;，一个&lt;strong&gt;牙刷类&lt;/strong&gt;，他们都有一个属性叫做&lt;strong&gt;出厂日期&lt;/strong&gt;和&lt;strong&gt;预计使用时长&lt;/strong&gt;，如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Toothbrush&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个时候就应该考虑是否将这两个属性提取出来，作为基类的存在，比如：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Toothbrush&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样看上去是不是好多了？&lt;/p&gt;

&lt;p&gt;在思想上：手机和牙刷都属于产品，产品会有出厂日期和使用时长等属性。&lt;/p&gt;

&lt;p&gt;在代码上：这样看上去也会整洁一些。&lt;/p&gt;

&lt;p&gt;也许有的朋友会说了，这样看起来改变不是很大呀？值得折腾一下吗？&lt;/p&gt;

&lt;p&gt;试想一下当后续拥有1w个产品呢？2w呢？每个类都写这两个属性会多多少代码呢？&lt;/p&gt;

&lt;h4 id=&quot;代码归位&quot;&gt;代码归位&lt;/h4&gt;

&lt;p&gt;这一点是我今天主要改动的一些地方，总是编码的过程中不自觉的陷入面对过程编程，然后一溜儿的代码就写出来了，其实都不是很符合面对对象的设计。&lt;/p&gt;

&lt;p&gt;还是上面的例子，现在我们要检查一下一个手机使用时间过长了没？来决定能否对他进行二次回收。我们在service层写了一个方法如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//测试，没有纠结具体实现及参数类型&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//传入日期和手机，判断手机是否过期，过期则返回空，不过期则返回该手机&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;huishou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneLastDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;useTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phoneLastDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来是不是特别没有毛病，我们先计算出了该手机可以被使用的最后一天，然后和传入的日期比较来决定是否回收。。。。&lt;/p&gt;

&lt;p&gt;但是这样每次回收都需要写一遍比较的这个方法，好歹封装个方法啊(我开始的做法)：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//测试，没有纠结具体实现及参数类型&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//传入日期和手机，判断手机是否过期，过期则返回空，不过期则返回该手机&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;huishou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isOverTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//判断是否过期封装为函数&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOverTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneLastDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;useTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phoneLastDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样子将判断的过程封装为函数，每次回收的时候调用一下这个函数，来决定是否回收就好了。这样多个后手函数也只用这一个函数，省了好多代码！&lt;/p&gt;

&lt;p&gt;我真机智！！！！&lt;/p&gt;

&lt;p&gt;其实还可以把这个函数写成泛型，凡是继承Product的类都可以判断，又省了一波代码，但是这不是这里的重点，不再展开了。。。&lt;/p&gt;

&lt;p&gt;我开始就走到了封装这一步，觉得自己很机智，后来一想，这个方法应该存在于这里吗？手机有出厂日期和使用时间长度的属性，就应该有是否过期的参数或者方法来告诉使用手机的人(或者对象)呀，这个是不是放在手机自身，甚至放在Product基类里面更合适呢？&lt;/p&gt;

&lt;p&gt;像这样：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;基类&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOverTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productLastDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productLastDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;判断是否回收变成了这样：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//测试，没有纠结具体实现及参数类型&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//传入日期和手机，判断手机是否过期，过期则返回空，不过期则返回该手机&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;huishou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOverTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候的思想是：拿到手机和日期，问手机：你过期了没！！按照手机的回答决定要不要抛弃(回收)他。&lt;/p&gt;

&lt;p&gt;这一步其实涉及到面对对象的设计，其实说起面对对象，我们很多人都可以头头是道，封装，集成，balabala，但是在实际的编码过程中？我们真的有遵守面对对象的思想吗？我们的代码真的可以称得上是面对对象吗？&lt;/p&gt;

&lt;p&gt;我不确定，我今天才发现这一点，那我以往的代码应该有很多犯了类似的错误了。&lt;/p&gt;

&lt;h3 id=&quot;代码可读性&quot;&gt;代码可读性&lt;/h3&gt;

&lt;h4 id=&quot;清理变量&quot;&gt;清理变量&lt;/h4&gt;

&lt;p&gt;虽然我们在编码过程中已经注意变量的定义，但是毕竟当时心系代码，总有疏漏，所以检查一遍总是没错的！&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;多个类都使用的静态变量分类移至Constant类中，单个类使用的静态变量自己定义。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能够定义成final的变量尽量定义成final，倒不是为了效率之类高深的东西，而是为了不下修改导致程序出错。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看一下变量名，这个其实应该在编码的时候就注意到，我们要保证自己的变量命令符合规范，而且尽量见名知意。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不要使用任何的魔法数字(出去内层循环)，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;int color = 2;&lt;/code&gt;
应该定义为：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COLOR_RED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COLOR_RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样方便后续修改，也方便其他程序员阅读。&lt;/p&gt;

&lt;h4 id=&quot;添加注释&quot;&gt;添加注释&lt;/h4&gt;

&lt;p&gt;当你回首看自己的代码，如果有任何地方稍有困惑，而且不修改的话，那就意味着这里需要注释，因为你自己写的都会困惑，其他人应该就蒙了.&lt;/p&gt;

&lt;p&gt;如果你的代码足够好，有自解释能力，那么是不需要添加注释的，但是对于普通人来说，我们还是应该在名称不够好的变量，方法上添加注释。&lt;/p&gt;

&lt;p&gt;尤其是对外提供的接口以及协议文件如proto里，注释尽可能详细些，否则你会不断地被联调接口的人打扰！&lt;/p&gt;

&lt;p&gt;暂时就想到这么多啦！后续有合适的再进行添加。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-29 完成
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E7%BC%96%E7%A8%8B%E9%9A%8F%E6%83%B3/2018/09/29/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E7%BC%96%E7%A8%8B%E9%9A%8F%E6%83%B3/2018/09/29/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        
        
        <category>编程随想</category>
        
      </item>
    
      <item>
        <title>Jsonfield注解的使用</title>
        <description>&lt;p&gt;PS:此文没有原理解读，仅有使用工具解决办法。&lt;/p&gt;

&lt;p&gt;日前在工作中，遇到了一个问题，关于java的序列化。&lt;/p&gt;

&lt;p&gt;工作中与前端的数据交换使用的协议是json+protobuf，主要是用protobuf。&lt;/p&gt;

&lt;p&gt;现在我需要接收一份较为复杂的数据，数据格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Json&quot;&gt;      {
        &quot;result&quot;: [
          {
            &quot;String&quot;: &quot;string&quot;,
            &quot;Int&quot;: 123,
            &quot;persions&quot;: [
              {
                &quot;person_name&quot;: &quot;huyan&quot;,
                &quot;person_name_2&quot;: &quot;shi&quot;
              }
            ],
            &quot;money&quot;: [
              {
                &quot;type&quot;: &quot;dollar&quot;,
                &quot;num&quot;: 100
              }
            ]
          },
          {
            &quot;String&quot;: &quot;str&quot;,
            &quot;Int&quot;: 123,
            &quot;persions&quot;: [],
            &quot;money&quot;: [
              {
                &quot;type&quot;: &quot;软妹币&quot;,
                &quot;num&quot;: 100
              }
            ]
          }
        ]
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;result里面是一个类的列表，我一开始将其定义为proto(这里要尤其注意，这个数据暂不牵涉到数据交换，单纯是懒，定义proto顺手就定义了)，然后在拿到result数组之后，需要将其转化为Java POJO列表。&lt;/p&gt;

&lt;p&gt;由JSONArray转化为对象列表，哎？？ fastJson有现成的呀，直接使用：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;方法走你！&lt;/p&gt;

&lt;p&gt;后来发现不行，json转java对象使用的是对象的get和set方法，而proto并没有提供传统的get和set方法，提供的是基于builder的set方法，即：set方法的返回值不是void，而是builder。&lt;/p&gt;

&lt;p&gt;重点来了，重点来了：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我选择了自己实现，即：遍历JSONArray，逐个取值，新建对象，存值。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不要问我为什么，懒！懒得改了。&lt;/p&gt;

&lt;p&gt;等我功能完全实现之后，打算review一下自己的代码，重构一下，因为这个需求做了好久，我都忘记自己写的啥玩意了。&lt;/p&gt;

&lt;p&gt;看到了这块代码，MMP啊，这代码别说老大给不给过，我自己就过不了啊！！！&lt;/p&gt;

&lt;p&gt;然后把这几个类的定义从proto改到普通的POJO，然后提取共性，一番折腾下来重新使用fastjson序列化，成功了，但是好多值莫名其妙的为空。尤其是其中的对象，person基本都是空。&lt;/p&gt;

&lt;p&gt;这个时候我甚至怀疑了一下是不是fastjson不支持这么复杂的数据转化，比如类里面有几个类的列表。&lt;/p&gt;

&lt;p&gt;(!!对不起，马爸爸我不该怀疑你的，对不起我知道我狂妄了，我这数据复杂个屁啊)。&lt;/p&gt;

&lt;p&gt;在冲动过后，我觉得fastjson不可能这么菜的，怀疑到是不是自己出错了，比如：属性名称不一样。。&lt;/p&gt;

&lt;p&gt;检查了一下，是的，，但是呢我的命名问题不大，而且业务都写好了不想改，这时候就用到@JSONField注解了。&lt;/p&gt;

&lt;p&gt;在每个名字不一样的属性上打上注解，注解里面备注名字，妥了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/WX20180928-205928.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jsonfield&quot;&gt;@JSONField&lt;/h3&gt;

&lt;p&gt;此注解可以使用在属性上和get/set方法上，具体效果为：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@JSONField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSONField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSONField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注解在属性上，序列化以及反序列化都会使用此名字，通俗点就是：会把json里面key为“Age”的值赋值给 该类的age，会把age的值写入“Age”。&lt;/p&gt;

&lt;p&gt;注解在get/set上就是上述操作的一半，一个控制序列化，一个控制反序列化。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-28 完成
2018-09-29 bug fix
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/2018/09/28/JSONField%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/2018/09/28/JSONField%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        
        
        <category>实际问题解决</category>
        
      </item>
    
      <item>
        <title>空格替换</title>
        <description>&lt;h2 id=&quot;1空格替换&quot;&gt;1.空格替换&lt;/h2&gt;

&lt;h3 id=&quot;来源-lintcode-空格替换&quot;&gt;来源: &lt;a href=&quot;https://www.lintcode.com/problem/space-replacement/description&quot;&gt;lintcode-空格替换&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;问题描述&quot;&gt;问题描述&lt;/h3&gt;

&lt;h4 id=&quot;描述&quot;&gt;描述&lt;/h4&gt;
&lt;p&gt;设计一种方法，将一个字符串中的所有空格替换成 %20 。你可以假设该字符串有足够的空间来加入新的字符，且你得到的是“真实的”字符长度。&lt;/p&gt;

&lt;p&gt;你的程序还需要返回被替换后的字符串的长度。&lt;/p&gt;

&lt;h4 id=&quot;样例&quot;&gt;样例&lt;/h4&gt;

&lt;p&gt;对于字符串”Mr John Smith”, 长度为 13&lt;/p&gt;

&lt;p&gt;替换空格之后，参数中的字符串需要变为”Mr%20John%20Smith”，并且把新长度 17 作为结果返回。&lt;/p&gt;

&lt;h4 id=&quot;挑战&quot;&gt;挑战&lt;/h4&gt;

&lt;p&gt;在原字符串(字符数组)中完成替换，不适用额外空间&lt;/p&gt;

&lt;h3 id=&quot;解决思路&quot;&gt;解决思路&lt;/h3&gt;

&lt;p&gt;这道题的暴躁版本呢，就是依次遍历，当遇到空格时，将空格后的字符依次后移两位，这样就腾出了3个空位，插入&lt;code class=&quot;highlighter-rouge&quot;&gt;%20&lt;/code&gt;即可。&lt;/p&gt;

&lt;p&gt;机制版本的思路呢？&lt;/p&gt;

&lt;p&gt;暴躁版本的问题就是，我们一次次的将后面的字符后移两位，有很多的重复操作，有没有可能一次性将字符移动到他最终的位置呢？&lt;/p&gt;

&lt;p&gt;我们以&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world&lt;/code&gt;为例。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我们可以拿到当前字符串的长度为&lt;font color=&quot;red&quot;&gt;11&lt;/font&gt;，然后遍历一次后，拿到字符串中空格的数量&lt;font color=&quot;red&quot;&gt;1&lt;/font&gt;，将 &lt;code class=&quot;highlighter-rouge&quot;&gt;L + 2 * n = 13&lt;/code&gt;就是最终字符串的长度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置两个指针，一个&lt;font color=&quot;red&quot;&gt;i=11&lt;/font&gt;指向原字符串末尾，一个&lt;font color=&quot;red&quot;&gt;j = 11&lt;/font&gt;指向新字符串末尾。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以i遍历原字符串，当i位置字符不等于空格，令j位置=i位置，如果i位置为空格，则给j，j-1，j-2位置依次放置0，2，%。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当i&amp;lt;0时停止循环。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-22 添加第一题
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/25/%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/25/%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/</guid>
        
        
        <category>算法</category>
        
      </item>
    
      <item>
        <title>字符串旋转&amp;fizzbuzz&amp;落单的数&amp;翻转整数</title>
        <description>&lt;h2 id=&quot;1字符串旋转&quot;&gt;1.字符串旋转&lt;/h2&gt;

&lt;h3 id=&quot;来源-lintcode-字符串旋转&quot;&gt;来源: &lt;a href=&quot;https://www.lintcode.com/problem/rotate-string/description&quot;&gt;lintcode-字符串旋转&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;问题描述&quot;&gt;问题描述&lt;/h3&gt;

&lt;h4 id=&quot;描述&quot;&gt;描述&lt;/h4&gt;
&lt;p&gt;给定一个字符串和一个偏移量，根据偏移量旋转字符串(从左向右旋转)&lt;/p&gt;

&lt;h4 id=&quot;样例&quot;&gt;样例&lt;/h4&gt;

&lt;p&gt;对于字符串 “abcdefg”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;offset=0 =&amp;gt; &quot;abcdefg&quot;
offset=1 =&amp;gt; &quot;gabcdef&quot;
offset=2 =&amp;gt; &quot;fgabcde&quot;
offset=3 =&amp;gt; &quot;efgabcd&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;挑战&quot;&gt;挑战&lt;/h4&gt;

&lt;p&gt;在数组上原地旋转，使用O(1)的额外空间&lt;/p&gt;

&lt;h3 id=&quot;解决思路&quot;&gt;解决思路&lt;/h3&gt;

&lt;p&gt;这道题比较简单，可以简单粗暴的直接截断重新拼接即可，但是题目要求使用O(1)的额外空间。&lt;/p&gt;

&lt;p&gt;这就要换个思路了，O(1)的空间，就代表着每次只可以移动一个字符，那么解决的思路就变成了：每次移动一个字符，移动offset次。&lt;/p&gt;

&lt;p&gt;即：每次将末尾的字符移动到第一位，其他位置的字符向后移动一位。将这个单字符的移动操作进行offset次。&lt;/p&gt;

&lt;h4 id=&quot;注意事项&quot;&gt;注意事项&lt;/h4&gt;
&lt;p&gt;1.题目中并没有规定offset必定小于字符串长度，因此需要处理这个逻辑，易知，当后移n(n=字符串长度)的时候，字符串回归原位置，因此可以将offset对字符串长度取模，得到真正的位移距离。&lt;/p&gt;

&lt;p&gt;2.在取模过程中，字符串长度作为除数，因此需要提前进行字符串长度是否等于0的判断。&lt;/p&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringRotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;charss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveLastToFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveLastToFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2fizz和buzz&quot;&gt;2.Fizz和Buzz&lt;/h2&gt;

&lt;h3 id=&quot;来源-lintcode-fizz-buzz&quot;&gt;来源: &lt;a href=&quot;https://www.lintcode.com/problem/fizz-buzz/description&quot;&gt;lintcode-fizz-buzz&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;问题描述-1&quot;&gt;问题描述&lt;/h3&gt;

&lt;h4 id=&quot;描述-1&quot;&gt;描述&lt;/h4&gt;
&lt;p&gt;给你一个整数n. 从 1 到 n 按照下面的规则打印每个数：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果这个数被3整除，打印fizz.&lt;/li&gt;
  &lt;li&gt;如果这个数被5整除，打印buzz.&lt;/li&gt;
  &lt;li&gt;如果这个数能同时被3和5整除，打印fizz buzz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;样例-1&quot;&gt;样例&lt;/h4&gt;

&lt;p&gt;比如 n = 15, 返回一个字符串数组：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  &quot;1&quot;, &quot;2&quot;, &quot;fizz&quot;,
  &quot;4&quot;, &quot;buzz&quot;, &quot;fizz&quot;,
  &quot;7&quot;, &quot;8&quot;, &quot;fizz&quot;,
  &quot;buzz&quot;, &quot;11&quot;, &quot;fizz&quot;,
  &quot;13&quot;, &quot;14&quot;, &quot;fizz buzz&quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;挑战-1&quot;&gt;挑战&lt;/h4&gt;

&lt;p&gt;Can you do it with only one if statement?&lt;/p&gt;

&lt;h3 id=&quot;解决思路-1&quot;&gt;解决思路&lt;/h3&gt;

&lt;p&gt;这个是真的简单，，，我就不写思路了吧。。&lt;/p&gt;

&lt;p&gt;从1到n，遍历，并且对每个做是否整除3，整除5，整除15的判断。&lt;/p&gt;

&lt;p&gt;至于&lt;strong&gt;挑战：Can you do it with only one if statement?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;** No, I can’t **&lt;/p&gt;

&lt;h3 id=&quot;实现代码-1&quot;&gt;实现代码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fizzBuzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fizz buzz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fizz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buzz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3反转一个3位整数&quot;&gt;3.反转一个3位整数&lt;/h2&gt;

&lt;h3 id=&quot;来源-lintcode-反转一个3位整数&quot;&gt;来源: &lt;a href=&quot;https://www.lintcode.com/problem/reverse-3-digit-integer/description&quot;&gt;lintcode-反转一个3位整数&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;问题描述-2&quot;&gt;问题描述&lt;/h3&gt;

&lt;h4 id=&quot;描述-2&quot;&gt;描述&lt;/h4&gt;
&lt;p&gt;反转一个只有3位数的整数。&lt;/p&gt;

&lt;h4 id=&quot;样例-2&quot;&gt;样例&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;123 反转之后是 321。&lt;/li&gt;
  &lt;li&gt;900 反转之后是 9。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;解决思路-2&quot;&gt;解决思路&lt;/h3&gt;

&lt;p&gt;这道题其实不限制与三位数，实现思路是善加利用除法和取模运算。&lt;/p&gt;

&lt;p&gt;123 的翻转为 3 * 100 + 2 * 10 + 1；
那么怎么来控制每位数字乘10的次数呢？当然是取模运算后，越早得到的数字乘十次数越多。&lt;/p&gt;

&lt;p&gt;假设传入值为 n=12345,结果result =0；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.
tmp = n % 10 = 5;
result = result * 10 + tmp = 5;;
n = n / 10;

2.tmp = n % 10 = 4;
result = result * 10 + tmp = 54；
n = n / 10;

有没有看出什么呢？
后面的不再写啦直接代码见。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;实现代码-2&quot;&gt;实现代码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotateInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个难度为&lt;strong&gt;入门&lt;/strong&gt;的有点简单的过分啊，，，不再做了吧。&lt;/p&gt;

&lt;h2 id=&quot;4落单的数&quot;&gt;4.落单的数&lt;/h2&gt;

&lt;h3 id=&quot;来源-lintcode-落单的数&quot;&gt;来源: &lt;a href=&quot;https://www.lintcode.com/problem/single-number/description&quot;&gt;lintcode-落单的数&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;问题描述-3&quot;&gt;问题描述&lt;/h3&gt;

&lt;h4 id=&quot;描述-3&quot;&gt;描述&lt;/h4&gt;
&lt;p&gt;给出2*n + 1 个的数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字。&lt;/p&gt;

&lt;h4 id=&quot;样例-3&quot;&gt;样例&lt;/h4&gt;
&lt;p&gt;给出 [1,2,2,1,3,4,3]，返回 4&lt;/p&gt;

&lt;h4 id=&quot;挑战-2&quot;&gt;挑战&lt;/h4&gt;

&lt;p&gt;一次遍历，常数级的额外空间复杂度&lt;/p&gt;

&lt;h3 id=&quot;解决思路-3&quot;&gt;解决思路&lt;/h3&gt;

&lt;p&gt;这道题，暴力的方法就不讲了，主难在挑战上。&lt;/p&gt;

&lt;p&gt;首先你要懂得异或的原理，即可以得出3个结论：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;相同的数字异或结果为0&lt;/li&gt;
  &lt;li&gt;和0异或结果为自身&lt;/li&gt;
  &lt;li&gt;异或也符合结合律。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a ^ a = 0;
a ^ 0 = a;
a ^ b ^ c = a ^ (b ^ c);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样就相当的明了了，我们只需要数组中的数字异或，根据结合律，两个相同的数字得到0，0和落单的数异或得到结果。&lt;/p&gt;

&lt;h3 id=&quot;实现代码-3&quot;&gt;实现代码&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-22 添加前4道题
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC&FizzBuzz&%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0&%E7%BF%BB%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC&FizzBuzz&%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0&%E7%BF%BB%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
        
        
        <category>算法</category>
        
      </item>
    
      <item>
        <title>尾部的0&amp;小老鼠喝药</title>
        <description>&lt;h2 id=&quot;1尾部的0&quot;&gt;1.尾部的0&lt;/h2&gt;

&lt;h3 id=&quot;来源-lintcode-尾部的0&quot;&gt;来源: &lt;a href=&quot;https://www.lintcode.com/problem/trailing-zeros/&quot;&gt;lintcode-尾部的0&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;问题描述&quot;&gt;问题描述&lt;/h3&gt;

&lt;h4 id=&quot;描述&quot;&gt;描述&lt;/h4&gt;
&lt;p&gt;设计一个算法，计算出n阶乘中尾部零的个数&lt;/p&gt;

&lt;h4 id=&quot;样例&quot;&gt;样例&lt;/h4&gt;

&lt;p&gt;11! = 39916800，因此应该返回 2&lt;/p&gt;

&lt;h4 id=&quot;挑战&quot;&gt;挑战&lt;/h4&gt;

&lt;p&gt;O(logN)的时间复杂度&lt;/p&gt;

&lt;h3 id=&quot;解决思路&quot;&gt;解决思路&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先排除计算结果然后数末尾的0，一来太low了，二来开销太大并不符合题目中O(logN)的时间复杂度要求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分析出现0的原因，直接原因就是与10，100等相乘，同时也有类似于5&lt;em&gt;2或者5&lt;/em&gt;4这样的。而10，100等都可以使用5乘以偶数得到。
因此得出结论：产生0的成因是：5 * 偶数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;5的倍数都包含5，5的数列：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5,10,15,20...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;偶数数列：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2,4,6,8...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;可见，偶数出现的频率远大于5及其倍数，因此可以默认为：出现一个5，末尾则会出现一个0.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;5的平方，立方等含有更多的5，应多次计算。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此就有解法1：
1.对每个数字依次除以5，如果余数为0则+1，如果得到的商除以5余数仍为0则再加一，直到余数不为0再继续下一数字。
实例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;求30！
解：
  1/5 = 0 余 1；pass
  2/5 = 0 余 2；pass
  ...
  5/5 = 1 余 0；+ 1；1/5 = 0 余 1；pass
  ...
  10/5 = 2 余 0；+1；2/5 = 0 余 2；pass
  ...
  ...
  25/5 = 5 余 0； +1；5/5 = 1 余 0； + 1；1/5 = 0 余 1；pass
  ..
  ..

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个方法可以实现结果，但是时间复杂度至少是O(N),因为需要遍历一遍数字，所以不做实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解法2&lt;/strong&gt;
1.对所求数字除以5，得到的商即为该数字之下的数字包含多少5(未考虑5的幂)，对拿到的商再次除以5，即为该数字之下包含多少个5的平方(25,因为除了2次5)
，对拿到的商再除以5，即为包含多少5的立方，直到商为0；&lt;/p&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;h4 id=&quot;java版本&quot;&gt;java版本&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trailingZeros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;shell版本&quot;&gt;shell版本&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt; / 5&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; + &lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2小老鼠喝药药&quot;&gt;2.小老鼠喝药药&lt;/h2&gt;

&lt;h3 id=&quot;来源网络&quot;&gt;来源：网络&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;这道题其实不算算法题，因为没有必要写代码实现，但是解决的思路却是应用了一些算法知识，而鉴于见到这道题太多次了，所以在此记录一下。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;问题描述-1&quot;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？&lt;/p&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;看到1000和10其实就应该反映过来了，2的10次方为1024，覆盖1000.&lt;/li&gt;
  &lt;li&gt;所以此题与8瓶水三只老鼠的解题思路完全一样，因此下面基于8瓶水喝3只老鼠。&lt;/li&gt;
  &lt;li&gt;3位的二进制刚好可以表示十进制的8，因此只需要将每瓶毒药按照二进制的1和0来确定某只老鼠喝不喝，一星期后，以老鼠的死亡排列，既可以得出是第几瓶有毒。&lt;/li&gt;
  &lt;li&gt;此题误区：
  (1). 死亡的并不一定只有一只老鼠
  (2). 并不是只有死亡的老鼠才对结果有用。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;5.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;1号&lt;/th&gt;
      &lt;th&gt;2号&lt;/th&gt;
      &lt;th&gt;3号&lt;/th&gt;
      &lt;th&gt;水的编号&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;将水按照从0到7编号，将三只小老鼠固定位置且编号。
(1).0为不喝，1为喝，因此编号为0的水，所有老鼠都不喝。
(2).编号为1的水只有3号喝…
(3).编号为5的水1号和3号喝
(4).编号为7的水所有老鼠都喝。
(5).当一周后，将死亡的老鼠置为1，没死亡的置为0，根据排列算出10进制，即为毒药编号。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-15      添加尾部的0&amp;amp;喝药药的小老鼠
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/15/%E5%B0%BE%E9%83%A8%E7%9A%840&%E5%B0%8F%E8%80%81%E9%BC%A0%E5%96%9D%E8%8D%AF/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/15/%E5%B0%BE%E9%83%A8%E7%9A%840&%E5%B0%8F%E8%80%81%E9%BC%A0%E5%96%9D%E8%8D%AF/</guid>
        
        
        <category>算法</category>
        
      </item>
    
      <item>
        <title>字符串查找(kmp)</title>
        <description>&lt;h2 id=&quot;1字符串查找kmp&quot;&gt;1.字符串查找(kmp)&lt;/h2&gt;

&lt;h3 id=&quot;来源&quot;&gt;来源:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lintcode.com/problem/implement-strstr/description&quot;&gt;lintcode-字符串查找&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.lintcode.com/problem/strstr-ii/description&quot;&gt;lintcode-字符串查找II&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;问题描述&lt;/h3&gt;
&lt;h4 id=&quot;描述&quot;&gt;描述&lt;/h4&gt;
&lt;p&gt;对于一个给定的 source 字符串和一个 target 字符串，你应该在 source 字符串中找出 target 字符串出现的第一个位置(从0开始)。如果不存在，则返回 -1。&lt;/p&gt;

&lt;h4 id=&quot;说明&quot;&gt;说明&lt;/h4&gt;
&lt;p&gt;在面试中我是否需要实现KMP算法？&lt;/p&gt;

&lt;p&gt;不需要，当这种问题出现在面试中时，面试官很可能只是想要测试一下你的基础应用能力。当然你需要先跟面试官确认清楚要怎么实现这个题。&lt;/p&gt;
&lt;h4 id=&quot;样例&quot;&gt;样例&lt;/h4&gt;
&lt;p&gt;如果 source = “source” 和 target = “target”，返回 -1。&lt;/p&gt;

&lt;p&gt;如果 source = “abcdabcdefg” 和 target = “bcd”，返回 1。&lt;/p&gt;

&lt;h4 id=&quot;挑战&quot;&gt;挑战&lt;/h4&gt;
&lt;p&gt;O(n2)的算法是可以接受的。如果你能用O(n)的算法做出来那更加好。（提示：KMP）&lt;/p&gt;

&lt;h3 id=&quot;解决思路&quot;&gt;解决思路&lt;/h3&gt;

&lt;p&gt;题目说明中提示了此题的目的为考察KMP算法，但是并不要求强行实现，那么本文将作出两种实验方式，即O(N)和O(N2)两种方法，另外，在文后会有自己对KMP算法的一些理解。&lt;/p&gt;

&lt;h4 id=&quot;1暴躁cao老哥型方法&quot;&gt;1.暴躁(cao)老哥型方法&lt;/h4&gt;
&lt;p&gt;当然就是穷举了，假设两个字符串为&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ACBACDBB ------T串
ACD   -------p串
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;那么我们可以首先比较T[0]和P[0]，如果相等则比较T[1]和P[1]，如果一直到p串结束都相等则返回，中间如果有不相等，则比较T[1]和P[0]…..&lt;/p&gt;

&lt;p&gt;即：逐个比较，当发生不相等时，将T串的开始比较位置向后移动一位，再次逐个比较，直到拿到结果。&lt;/p&gt;

&lt;p&gt;这种方法胜在简单粗暴，虽然浪费了点但是能在短时间内理解并实现。&lt;/p&gt;

&lt;h4 id=&quot;2机制boy型方法kmp算法&quot;&gt;2.机制boy型方法(KMP算法)。&lt;/h4&gt;
&lt;p&gt;在上面的例子中，当第一次发现AC相同但是B/D不同时，再见将T[1]和P[0]相比较，是一个浪费的行为，因为因为很明显：前面的2位都与自身的前两位一样，而自身的前两位并无相等，可以推出T[1]和P[0]肯定不相等。&lt;/p&gt;

&lt;p&gt;这就得出KMP的基本思想：将之前一次的比较信息(如前面的AC两位相等)不要抛弃，而是从这个信息中获取我们应该跳过一些“必不可能”匹配的值，以此来提高性能。&lt;/p&gt;

&lt;p&gt;重新举例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BBC ABCDAB ABCDABCDABDE     -------T串
ABCDABD     -------P串
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中，&lt;br /&gt;
1.第一次比较：T[0] != P[0]，向后移一位；
2.第二次比较：T[1] != P[0], 向后移一位；
..
3.直到：T[4] = P[0],都向后移动一位；
4.T[5] = P[1]，再次都想后移动一位。
…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BBC ABCDAB ABCDABCDABDE     -------T串
    ABCDABD     -------P串
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;5.直到：T[10] != P[6]，这个时候返回第三部，重新从T[5]和P[0]开始比较吗？no！！此时肉眼可见，机智的方法是将字符串这样比较：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BBC ABCDAB ABCDABCDABDE     -------T串
        ABCDABD     -------P串
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;即直接比较T[10]和P[2] &lt;strong&gt;空格与C&lt;/strong&gt;，为什么呢？因为此时前面的2位AB我们是可以知道他们相等的，怎么知道的呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意在 4 步骤后的示例中，P串的前6位已经完全匹配了，想知道在T中刚比较过的有几位与P串开头相同，只需要比较已经匹配的6位中，前缀和后缀相同有几位就好。&lt;/strong&gt;&lt;br /&gt;
在此例中：前6位为&lt;code class=&quot;highlighter-rouge&quot;&gt;ABCDAB&lt;/code&gt;,明显是2位相同(前缀AB和后缀AB)，那么只需要将T[10]与P[2]相比较就好。&lt;/p&gt;

&lt;p&gt;6.T[10] != P[2]，此时前面两位为&lt;code class=&quot;highlighter-rouge&quot;&gt;AB&lt;/code&gt;，前缀与后缀并无相同，所以将T[10]与P[0]进行相比。&lt;/p&gt;

&lt;p&gt;7.T[10] != P[0],比较 P[11] 和P[0]，进入下一个循环。&lt;/p&gt;

&lt;p&gt;8.由于匹配可能在P串的任何一个地方“断裂”，那么每次断裂，都需要算一次“前缀后缀相同的长度”，也是极其浪费的行为，因此，在KMP算法开始前，会对P串进行一次计算，得到在每个位置发生“断裂”时，P串指针回溯的位置，即当前已匹配字段的前缀后缀相同长度。也就是众多KMP算法讲解中的next数组。&lt;/p&gt;

&lt;p&gt;总结：原始的暴力方法，当发现不相同后，将T串的指针回溯，这样及其浪费，而在KMP中，避免了T串的指针回溯，在发现不相等时，通过对已匹配字段的分析，将P串指针回溯一个&lt;strong&gt;适合&lt;/strong&gt;的值，而T串指针只有在首字母就不相同时才会继续前进。&lt;/p&gt;

&lt;p&gt;写完这一段，深感自己写的糊里糊涂，但是已尽到目前的能力，后续如果有能力，可以再出一个插图版的讲解。
在这里介绍两个我在学习过程中，看到的关于KMP的博客，属于个人认为讲解的较为清晰的，分享给大家，一起进步。
&lt;a href=&quot;&quot;&gt;简洁，说明原理型 &lt;/a&gt;
&lt;a href=&quot;&quot;&gt;详细，逻辑鬼才型 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;个人推荐：先读简洁篇，对原理有个大概的了解，然后去细读详细篇，否则可能会出现完全看不懂的情况。当然，如果你看我的博客就已经懂了(怎么可能！！)，烦请一定留言告诉我，鼓励下我！！&lt;/p&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;

&lt;h4 id=&quot;暴躁老哥版本on2&quot;&gt;暴躁老哥版本(O(N2))&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 如果当前字符匹配成功,则将两者各自增1,继续比较后面的字符&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 如果当前字符匹配不成功,则i回溯到此次匹配最开始的位置+1处,也就是i = i - j + 1&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// (因为i,j是同步增长的), j = 0;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 匹配成功,则返回模式字符串在原字符串中首次出现的位置;否则返回-1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;机制boy型on&quot;&gt;机制boy型(O(N))&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//计算返回值&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//多检测下极端值总是没有坏处的.尤其是面试和刷题.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 如果j = -1,或者当前字符匹配成功(src[i] = ptn[j]),都让i++,j++&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 如果j!=-1且当前字符匹配失败,则令i不变,j=next[j],即让pattern模式串右移j-next[j]个单位&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//获取next数组&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 已知next[j] = k,利用递归的思想求出next[j+1]的值&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 如果已知next[j] = k,如何求出next[j+1]呢?具体算法如下:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1. 如果p[j] = p[k], 则next[j+1] = next[k] + 1;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2. 如果p[j] != p[k], 则令k=next[k],如果此时p[j]==p[k],则next[j+1]=k+1,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 如果不相等,则继续递归前缀索引,令 k=next[k],继续判断,直至k=-1(即k=next[0])或者p[j]=p[k]为止&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next数组中next[0]为-1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;
&lt;p&gt;单就字符串查找这个算法而言，网上思路繁多，而且自己多想一下总有具有自己特色的实现方法。&lt;/p&gt;

&lt;p&gt;KMP算是一个比较通用且效率较为不错(非最优)的实现方法，思路较为一致：找出一个当匹配失败时子串回溯的长度。然而在具体实现过程中，尤其是next数组的求解过程中，我看到了许多思路且都很难快速理解。&lt;/p&gt;

&lt;p&gt;恕在下愚钝，理解了老半天还是模模糊糊的，万一哪天豁然开朗，再来重新补充一份简单易懂的讲解。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-15      添加思路及KMP讲解&lt;br /&gt;
2018-09-16      添加实现代码
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE(KMP)/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E7%AE%97%E6%B3%95/2018/09/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE(KMP)/</guid>
        
        
        <category>算法</category>
        
      </item>
    
      <item>
        <title>String Stringbuilder Stringbuffer异同</title>
        <description>&lt;p&gt;字符串在编程中使用的非常频繁，同时又是面试中的常见题型，那么我们的对字符串相关类String，StringBuilder，StringBuffer的理解真的正确吗？今天就通过对三个类源码的阅读，来进一步加强理解。&lt;/p&gt;

&lt;p&gt;## 目录&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;String概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;StringBuilder 和StringBuffer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;异同&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;性能比较&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;结论&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;扩展(详细源码阅读及方法解析)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2&quot;&gt; String概述&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/Fi_sBbtlLREpBuY49ajeMrLaildf.png&quot; alt=&quot;&quot; /&gt;
打开String类的源码，可以发现String类是被final所修饰的，因此String类不可以被继承。&lt;/p&gt;

&lt;p&gt;同样的，用来保存值得char数组 value也是被final修饰的，这就可以得出关于String的一个很重要的结论。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String是字符串常亮，值是不可改变，通常我们对String的操作都是通过new一个新的String对象来完成的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如下图中的subString方法和replace方法。
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180921000114583.png&quot; alt=&quot;substring&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180921000240260.png&quot; alt=&quot;replace&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3&quot;&gt; StringBuilder和StringBuffer&lt;/h2&gt;

&lt;p&gt;既然已经有了String这个功能完备的嘞，那么为什么还需要StringBuilder和StringBuffer呢？&lt;/p&gt;

&lt;p&gt;让我们来看一下这两个类的源代码：
 &lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180921002301146.png&quot; alt=&quot;buffer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180921002336352.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，这两个类共同继承于&lt;strong&gt;AbstractStringBuilder&lt;/strong&gt;，那么打开这个类的源码看一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180921002434384.png&quot; alt=&quot;AbstractStringBuilder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，这个抽象类中也是以char数组的形式来保存字符串，但是，这个数组是可变的，我们看一下append方法的代码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180921002947941.png&quot; alt=&quot;append&quot; /&gt;&lt;/p&gt;

&lt;p&gt;append()是最常用的方法，它有很多形式的重载。上面是其中一种，用于追加字符串。如果str是null,则会调用appendNull()方法。这个方法其实是追加了’n’、’u’、’l’、’l’这几个字符。如果不是null，则首先扩容，然后调用String的getChars()方法将str追加到value末尾。最后返回对象本身，所以append()可以连续调用。&lt;/p&gt;

&lt;p&gt;那么StringBuffer、StringBuilder的区别在哪里呢？&lt;/p&gt;

&lt;p&gt;这是StringBuffer的length方法和capacity方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-2018092100342915.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是AbstractStringBuilder的length方法和capacity方法(Stringbuilder没有进行重写)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180921003635251.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很明显，Stringbuffer对大部分方法添加了 synchronized关键字，来保证线程安全。&lt;/p&gt;

&lt;h2 id=&quot;4&quot;&gt; 异同&lt;/h2&gt;

&lt;p&gt;从上面的一些源码中可以简单分析出String，StringBuilder，StringBuffer的一些异同点，如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;String是常量，不可改变，StringBuffer、StringBuilder是变量，值是可变的&lt;/li&gt;
  &lt;li&gt;StringBuilder是线程不安全的，而StringBuffer线程安全。 String是常量，线程当然安全。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5&quot;&gt; 性能比较&lt;/h2&gt;

&lt;p&gt;说了这么多，在实际应用过程中，到底应该注意点什么呢？&lt;/p&gt;

&lt;p&gt;下面来实际测试一下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringAnalytics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StringBuilder&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StringBuffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上面的代码，分别使用String，StringBuilder，StringBuffer进行了50000的字符串拼接操作(String使用+方法，其他两个类使用append方法)，每次拼接的值为当前循环的数字。在该部分执行前后记录当前系统时间，最后算出消耗时间。&lt;/p&gt;

&lt;p&gt;得到的结果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-2018092100463015.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String消耗16.153秒&lt;/li&gt;
  &lt;li&gt;StringBuilder消耗0.005秒&lt;/li&gt;
  &lt;li&gt;StringBuffer消耗0.013秒&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6&quot;&gt; 结论&lt;/h2&gt;
&lt;p&gt;终于到了喜闻乐见的结论时候：&lt;/p&gt;

&lt;p&gt;PS:以下结论使用于大部分情况，实际编译编码过程中会有编译优化等原因稍微影响结论，但不能代表大多数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.当字符串改动较小的时候，使用String&lt;/strong&gt;&lt;br /&gt;
原因：方便且线程安全&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.当字符串需要频繁进行改动，且单线程使用StringBuilder&lt;/strong&gt;&lt;br /&gt;
原因：由5中可知，StringBuilder是效率最高的了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.当字符串需要频繁改动，且多线程调用。使用StringBuffer&lt;/strong&gt;&lt;br /&gt;
原因：StringBuffer中添加了对多线程应用时的保护，可以保证线程安全，且性能下降并不严重，在可接受范围内。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-22 完成
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/2018/09/09/String-StringBuilder-StringBuffer%E5%BC%82%E5%90%8C/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/2018/09/09/String-StringBuilder-StringBuffer%E5%BC%82%E5%90%8C/</guid>
        
        
        <category>源码阅读</category>
        
      </item>
    
      <item>
        <title>使用jekyll搭建个人博客</title>
        <description>&lt;p&gt;其实蛮纠结这篇文章到底放在哪个分类下呢？&lt;strong&gt;开发环境搭建&lt;/strong&gt;？还是&lt;strong&gt;环境搭建&lt;/strong&gt;？后面想了一下，写博客总结是和我们日常开发一样重要的任务！也是一种开发，那么博客的搭建自然就算在&lt;strong&gt;开发环境搭建&lt;/strong&gt;下面了！&lt;/p&gt;

&lt;p&gt;哈哈，废话不多说，开搞！&lt;/p&gt;

&lt;h2 id=&quot;1成果展示&quot;&gt;1.成果展示&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/HuBlanker/blog&quot;&gt;我的github仓库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://huyan.couplecoders.tech/&quot;&gt;我的博客&lt;a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2概述&quot;&gt;2.概述&lt;/h2&gt;
&lt;p&gt;之前曾经在Github Pages上使用jekyll搭建过一个博客，也绑定了自己的域名，使用体验十分好，每次在本地编辑完，只需要执行git push命令即可完成博客的更新。&lt;/p&gt;

&lt;p&gt;后来由于工作原因，想跑点自己的代码在服务器上，因此购买了服务器，就一不做二不休，将博客也迁移到自己服务器上，方便进行后续的扩展和开发。&lt;/p&gt;

&lt;p&gt;不过即使在自己的服务器上搭建博客，仍然推荐在github上保存一份仓库，因为我相信，我们自己的服务器并没有github的服务器稳健，如果后续我们不再购买，或者服务器崩溃数据丢失，在github上有完整仓库也可以很快重新搭建。&lt;/p&gt;

&lt;h2 id=&quot;3资源使用&quot;&gt;3.资源使用&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;服务器一台
阿里云购买的，配置随意，反正我的博客也不会有很大的访问量。&lt;/li&gt;
  &lt;li&gt;域名一个
阿里云关联的万网购买，购买平台无所谓，但是要保证密码等保存记录，方便后续迁移。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4技术使用&quot;&gt;4.技术使用&lt;/h2&gt;
&lt;p&gt;这里的技术使用指的是如果你会这些技术，那么在搭建过程中就会方便很多，不回去百度，而且碰到问题也可以自己进行调试。&lt;/p&gt;

&lt;p&gt;当然，&lt;strong&gt;即使你不是计算机从业人员，只要你跟随博客操作，多查多看多想，也是可以完成的。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;linux基础知识
搭建服务器时使用了一些基础命令&lt;/li&gt;
  &lt;li&gt;git基础知识
博客使用git仓库的形式存储，方便管理及在github上面进行备份&lt;/li&gt;
  &lt;li&gt;jekyll基本原理(非必须，懂更好)
即使你不懂jekyll，你也可以完成搭建，但是如果打算长期使用，最好了解一下jekyll的原理，这样方便后续的维护。&lt;/li&gt;
  &lt;li&gt;shell脚本知识&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5配置过程&quot;&gt;5.配置过程&lt;/h2&gt;
&lt;h3 id=&quot;51服务器&quot;&gt;5.1服务器&lt;/h3&gt;
&lt;p&gt;首先登陆阿里云官网，购买服务器，如果只是搭建博客，可以购买乞丐版(我就是！！)，价格很便宜。&lt;/p&gt;

&lt;p&gt;可以首先领取阿里云的一个月免费试用，等操作熟悉，确定继续试用后再进行续费（第一年99，后续每年600多700），同事如果你是学生，可以参加阿里云的云翼计划，更加划算。&lt;/p&gt;

&lt;p&gt;购买成功后，登录自己创尔账户，进入阿里云控制台，选择自己的服务器
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180924172459837.png&quot; alt=&quot;服务器&quot; /&gt;
在右侧点击远程连接，输入自己的密码。&lt;/p&gt;

&lt;p&gt;这一步如果是windows平台，可以使用xshell等工具，mac平台可以直接在命令行输入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@你的服务器地址(10.10.10.10)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后输入密码即可进行服务器命令行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;服务器上的操作使用命令行大部分都可完成，不建议安装图形界面等&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;如果为了安全，可以登录后新建其他用户，root用户权限过大，容易发生误操作&lt;/em&gt;
我对自己很自信(lan)所以一直在使用root用户。&lt;/p&gt;

&lt;p&gt;之后可以开始jekyll的安装了。&lt;/p&gt;

&lt;h4 id=&quot;安装jekyll&quot;&gt;安装Jekyll&lt;/h4&gt;
&lt;p&gt;Jekyll的安装过程这里不再详细叙述，网上教程很多，这里给大家介绍一个个人觉得不错的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012560959&quot;&gt;在 Linux 上搭建Jekyll静态博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同时附上Jekyll的官方中文文档。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllcn.com/docs/usage/&quot;&gt;Jekyll中文文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在上文的jekyll搭建教程中，已经安装好了Jekyll，但是在实际使用中会有一点改变，主要是服务启动方法的改变。&lt;/p&gt;

&lt;p&gt;教程中，最后使用如下命令启动Jekyll服务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve -H 0.0.0.0 -P 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样启动的服务在你关闭命令行后就会停止，而我们在服务器的服务不可能保存命令行连接，因此需要修改为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve -H 0.0.0.0 -P 80 --detach
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样以守护进程的方式启动了Jekyll服务，不再依赖于命令行连接。&lt;/p&gt;

&lt;p&gt;当你想要停止服务时，可以使用以下命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkill &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;jekyll

&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; jekyll服务进程编号

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用jekyll写博客&quot;&gt;使用jekyll写博客&lt;/h4&gt;
&lt;p&gt;按照官方文档及上文教程中的指示，我们删除掉_posts目录下的文章，重新编写自己的md文件，并重启jekyll服务即可展示我们的博客了。&lt;/p&gt;

&lt;h4 id=&quot;开放端口&quot;&gt;开放端口&lt;/h4&gt;

&lt;p&gt;服务器配置成功后，需要开放你想使用的端口，在阿里云控制台即可进行操作。&lt;/p&gt;

&lt;p&gt;操作十分简单，点点点就好了，具体方法自行百度一下。&lt;/p&gt;

&lt;h3 id=&quot;52域名&quot;&gt;5.2域名&lt;/h3&gt;

&lt;p&gt;域名购买成功后，需要再域名购买商提供的网站控制台修改域名解析，将域名解析到你的服务器地址，同时，国内域名购买后需要备案，
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180924175726887.png&quot; alt=&quot;beian&quot; /&gt;
登录阿里云网站后点击备案，按照教程一步步操作就好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里强烈建议大家购买后尽快进行备案&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;不备案网站是无法使用80端口的，即别人无法通过yuming.com方法你的博客，必须带上其他端口，如”yuming.com:8111”,这样明显是不科学的。&lt;/li&gt;
  &lt;li&gt;备案需阿里云初审后送至管局审批，如果是第一次备案，阿里云后给你邮寄幕布让你拍照，这中间需要一些等候时间。&lt;/li&gt;
  &lt;li&gt;阿里云的初审比较快，基本上提示1-3天内回复，都是1天内就给出结果，而提交管局审批后，阿里云提示预估时间为17天，我生生等了13天才通过。。。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6nginx端口分发&quot;&gt;6.nginx端口分发&lt;/h3&gt;

&lt;p&gt;我们的服务器上不可能只运行一个博客，但是80端口只有一个，怎么办呢？&lt;/p&gt;

&lt;p&gt;在启动Jekyll服务时，使用的命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; 0.0.0.0 &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中-P指定的就是启动时的端口，你可以修改为任意你服务器开放了的端口，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve -H 0.0.0.0 -P 8899 --detach

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，你就将Jekyll服务启动在了8899端口下，那么问题来了，刚才说的只能访问80端口呢！不急。&lt;/p&gt;

&lt;p&gt;我们在购买域名后，可以设置子域名。&lt;/p&gt;

&lt;p&gt;1.首先去域名购买网站的控制台，在解析记录中，添加你想使用的子域名,同样解析指向你的服务器，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;blog.yuming.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.在服务器上安装nginx。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3.启动nginx&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$sudo /etc/init.d/nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.修改nginx配置文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /etc/nginx
vi nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 http 后的大括号内添加图片内容：
&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180924183417326.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中&lt;/p&gt;

&lt;p&gt;liston：80。想要监听的端口
server_name:blog.yuming.com。为你设置的子域名
location 后面的 http://localhost:8899。为你启动的Jekyll端口。&lt;/p&gt;

&lt;p&gt;5.重新nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在浏览器访问你的子域名即可跳转至你的博客。&lt;/p&gt;

&lt;h2 id=&quot;7初步完成&quot;&gt;7.初步完成&lt;/h2&gt;

&lt;p&gt;至此，我们已经已经拥有了一个博客，实现了基本功能如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;编写博客，在本地建立md文件，按照markdown语法写完博客，发送至服务器上blog下的_posts文件夹下，重启jekyll服务即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;展示博客，我们/其他人可以通过访问blog.yuming.com访问我们的博客并浏览。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;能写能看，强无敌！&lt;/strong&gt;&lt;/p&gt;

&lt;font size=&quot;4&quot; color=&quot;red&quot;&gt;----------------进一步优化方案分割线---------------------&lt;/font&gt;

&lt;h2 id=&quot;但是有没有感受到一些不对劲呢&quot;&gt;但是有没有感受到一些不对劲呢？&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;本地写完执行scp命令扔到服务器上，还需要去服务器上重启一下Jekyll，如果我们频繁的上传博客不是累死？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;说好的备份呢？每次本地写一个md文件，咋管理呢？万一服务器崩了本地也丢了呢？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;别人看完你的博客，发现错误了，想告诉你怎么办？发邮件吗？&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;让我们来一个一个解决。&lt;/p&gt;

&lt;h3 id=&quot;自动部署&quot;&gt;自动部署&lt;/h3&gt;

&lt;p&gt;经常性的登录服务器肯定是不科学的，每次写完扔到服务器上再去服务器上重启服务肯定是要改善的对不对？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最好有一点git基础知识&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里就要用到git了，git不就可以把日常写的代码，文件等等推送到远程吗？而且我们刚才建立博客的时候，是克隆的github上的仓库呀。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先在服务器上建立git仓库，使用
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;初始化你的仓库。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PS：不要使用git init –bare，这个是建立裸库的，也就是服务器端记录你的改动，你的文件，但是没有工作区，你在服务器上是不能看到你的文件的。&lt;/p&gt;

&lt;p&gt;(日常使用的git服务器大多是裸库，因为服务器端不需要进行修改，所有修改都是通过本地操作后push完成，但是我们需要在服务器端读取文件展示)&lt;/p&gt;

&lt;p&gt;通过git init 初始化的仓库，由于存在工作区，因此不允许push，防止工作区混乱，因此需要在/blog/.git/config文件内添加下图内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/markdown-img-paste-20180924191138425.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该内容作用为允许其他仓库向此仓库push。&lt;/p&gt;

&lt;font size=&quot;4&quot; color=&quot;red&quot;&gt;注意：这个方法是个人总结出的比较方便的方法，但是需要用户自己保证不在服务器端的工作区进行文件的改动及commit操作，否则极其容易造成工作区混乱，如果很喜欢在服务器上写，可以建立裸仓库用来保存，在其他文件夹建立本地仓库clone一份进行改动。这种方式不做介绍。&lt;/font&gt;

&lt;ol&gt;
  &lt;li&gt;在本地(个人电脑)上建立git仓库并关联远程仓库&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;//初始化仓库
git init
//关联远程仓库
git remote add origin 10.10.10.10:/你的仓库目录/.git
//拉取远程最新代码
git pull origin master

&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;本地改动提交&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//本地改动commit
git add .
git commit -m &quot;改动&quot;
//拉取远程最新并解决冲突
git pull origin master
//推送到远程
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，当我们改动了博客，不再需要去scp文件到服务器，只需要进行常用的git push命令就可以将当前提交推送到远程仓库啦！&lt;/p&gt;

&lt;p&gt;是不是感觉提升不大呢？从scp改动git push而已。&lt;/p&gt;

&lt;p&gt;不要急！重点在下面！&lt;/p&gt;

&lt;p&gt;怎样将&lt;font color=&quot;blue&quot;&gt;登录服务器,重启Jekyll&lt;/font&gt;这一个步骤在本地进行或者自动化进行呢？&lt;/p&gt;

&lt;p&gt;这就要用到git的钩子了。&lt;/p&gt;

&lt;p&gt;可以戳这里了解下什么是&lt;a gref=&quot;https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90&quot;&gt;钩子&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;总的来说就是git为我们提供了一种可以监听动作的机制，比如监听提交(还有其他机制，这里只用提交)。&lt;/p&gt;

&lt;p&gt;当我们每次往服务器进行一次提交，git监听到后可以自动执行一个脚本，这个脚本里面我们可以写自己的内容，是不是美滋滋？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在服务器的/blog/.git/hooks目录下新建&lt;code class=&quot;highlighter-rouge&quot;&gt;post-receive&lt;/code&gt;文件，文件内容为：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;pwd
cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;GIT_DIR
git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jekyll build success,and you blog is updated!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该脚本的作用为：cd到博客目录，拉取最新的代码。&lt;/p&gt;

&lt;p&gt;PS：这一步其实是因为我们创建git仓库时没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--bare&lt;/code&gt;,导致创建的仓库带有工作区，那么在远程push了一次提交后，服务器并不会自动拉取最新代码，因为服务器认为&lt;em&gt;你当前也在修改代码&lt;/em&gt;，所以我们在提交后需要用脚本来完成工作区文件的更新，以用于展示。&lt;/p&gt;

&lt;p&gt;同时，这里需要Jekyll的配合。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--watch&lt;/code&gt;参数启动服务，Jekyll可以自动监听_posts文件夹下的变化以用于更新展示内容，但是在Jekyll里面有个问题，当你执行以下语句：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve --watch --detach

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;你想要后台运行Jekyll(不绑定命令行连接)，又想动态监听变化，加了两个参数，但是执行结果是不会监听变化，这点是设计如此还是bug不清楚，但是我们可以执行以下命令来达到同样的结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//亲测可用
setsid jekyll serve --host 0 --watch --force_polling &amp;amp;&amp;gt;/dev/null &amp;lt;/dev/null &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;总结一下：&lt;/strong&gt;&lt;br /&gt;
在服务器上，我们以后台监听变化的形式启动Jekyll，然后添加git钩子，在每一次的push后，服务器自动拉取最新代码，同时Jekyll监听到变化自动重新展示，就实现了：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本地编辑，git提交并push到服务器，就完成了博客的更新&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;备份&quot;&gt;备份&lt;/h3&gt;

&lt;p&gt;搞完上一步，这一步骤就简单了，你可以在本地再次添加一个远程仓库，关联到github，每次改动后，push到github，再push到服务器上。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin_github git@github.com:XXXXX/blog.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样的话，每次更改完：提交一次到github，提交一次到服务器。&lt;/p&gt;

&lt;p&gt;PS： 后续可以考虑写个脚本，将两次提交放到脚本里进行，不然每次提交两次也蠢蠢的。&lt;/p&gt;

&lt;h3 id=&quot;添加评论系统&quot;&gt;添加评论系统&lt;/h3&gt;

&lt;p&gt;博客评论系统其实很多，但是前两年关闭了几个，所以我选择了一个很机智的解决方案。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imsun.net/posts/gitment-introduction/&quot;&gt;Gitment：使用 GitHub Issues 搭建评论系统&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这是作者写的教程页面，完全按照教程来亲测可行，而且很简单。&lt;/p&gt;

&lt;p&gt;Gitment基于Github Issues开发，为每一篇文章建立一个Issue，后续的评论作为Issue的回复存储在github上。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;功能性
我觉得很ok，评论回复带邮件提醒，查看也很明了&lt;/li&gt;
  &lt;li&gt;外观
见仁见智了&lt;/li&gt;
  &lt;li&gt;稳定性
很稳定，github官方授权，应该不存在短期内倒闭的情况。&lt;/li&gt;
  &lt;li&gt;缺点
每篇文章在第一次发布后，需要手动点击一次初始化评论，相当与在github上创建一个issue。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于这个缺点，可以通过执行脚本来批量初始化，但是目前没有研究，后续写了脚本或者学习到怎么批量初始化会再来贴在这里。&lt;/p&gt;

&lt;p&gt;而且对于大部分人的产出速度来说，手动点一次完全可以接受(手动滑稽)。&lt;/p&gt;

&lt;h2 id=&quot;扩展markdown编辑器及图床工具&quot;&gt;扩展(markdown编辑器及图床工具)&lt;/h2&gt;

&lt;h4 id=&quot;编辑器&quot;&gt;编辑器&lt;/h4&gt;

&lt;p&gt;本地在编辑markdown时，有许多的工具可供选择，一般推荐的话都要列举一番优缺点，但是我不，我用过好几个，这个是最舒服的，所以给大家推荐一下。&lt;/p&gt;

&lt;p&gt;Atom，我目前在用的有Mac版本，Ubuntu版本，都比较好用。&lt;/p&gt;

&lt;p&gt;Atom相比于其他的编辑器，有一个很不错的项目展示系统，类似于这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.couplecoders.tech/WX20180925-000235.png&quot; alt=&quot;&quot; /&gt;
可以很方便的看到当前目录下的文件，尤其是写博客时，方便管理。&lt;/p&gt;

&lt;p&gt;同时支持许多插件的扩展。
比如：markdown-img-paste，
可以很方便的截图然后粘贴上传至sm.ms或者七牛云图床。&lt;/p&gt;

&lt;p&gt;但是会有一点点小bug，偶尔不好使，尚且没有完全折腾透彻。&lt;/p&gt;

&lt;p&gt;其他的插件目前还没有用到。&lt;/p&gt;

&lt;h4 id=&quot;图床&quot;&gt;图床&lt;/h4&gt;

&lt;p&gt;图床的选择有很多，比如公共的sm.ms免费图床，或者七牛云图床。&lt;/p&gt;

&lt;p&gt;七牛云有一定的免费流量，超出之后需要收费，我觉得暂时是够用的，后续的费用也不是很高，可以接受。&lt;/p&gt;

&lt;p&gt;可以使用上面说的atom的插件进行上传，也可以使用“图床on七牛”chrome插件进行上传，都算是比较方便，图片数量不是很大时完全够用。&lt;/p&gt;

&lt;p&gt;同时，网上有许多七牛的批量上传方法，有需要可以自行研究一下。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;自己花了两天内的零碎时间逐渐折腾好了这一套配置，想着总结一下写出来，方便后续自己查找，同时帮助广大网友少走弯路，但是实际写出来总感觉叙述的不是特别清晰，没有达到预期的效果。&lt;/p&gt;

&lt;p&gt;如果有人按照操作出现问题，或者有什么不明白的问题，欢迎评论或者向底部邮箱发送邮件，可以一起探讨一下更加合适的解决方案。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;ChangeLog&lt;/h4&gt;
&lt;p&gt;2018-09-24 完成
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上皆为个人所思所得，如有错误欢迎评论区指正。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎转载，烦请署名并保留原文链接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;联系邮箱：huyanshi2580@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更多学习笔记见个人博客——&amp;gt;&lt;a href=&quot;/&quot;&gt;呼延十&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://0.0.0.0:8101/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2018/09/05/%E4%BD%BF%E7%94%A8jekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <guid isPermaLink="true">http://0.0.0.0:8101/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2018/09/05/%E4%BD%BF%E7%94%A8jekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        
        
        <category>开发环境搭建</category>
        
      </item>
    
  </channel>
</rss>
